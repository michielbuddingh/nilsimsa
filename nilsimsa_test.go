package nilsimsa

import (
	"bytes"
	"fmt"
	"io"
	"testing"
)

var testCases = []struct {
	seed, length int64
	expectedCode string
	expected     [256]int64
}{
	{3029, 3,
		"0000010000000000000000000000000000000000000000000000000000000000",
		[256]int64{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		}},
	{91710, 1024 * 20,
		"594f74509a5d3d27c5f90412d5ee1f987c140273bdcf1d5a4681b095aada9982",
		[256]int64{
			630, 662, 634, 622, 624, 626, 615, 651, 671, 635, 600, 676, 674, 608, 596, 660,
			627, 665, 621, 664, 682, 631, 644, 650, 638, 687, 633, 654, 633, 641, 614, 649,
			641, 626, 653, 617, 644, 633, 611, 646, 630, 609, 620, 637, 641, 666, 636, 646,
			677, 633, 632, 627, 634, 626, 601, 649, 634, 644, 647, 616, 618, 628, 655, 612,
			638, 647, 636, 642, 668, 635, 661, 613, 651, 637, 652, 642, 677, 606, 632, 578,
			700, 641, 657, 648, 632, 621, 663, 647, 647, 620, 723, 672, 646, 673, 629, 653,
			658, 651, 619, 615, 649, 645, 669, 612, 637, 641, 627, 582, 632, 618, 634, 607,
			624, 634, 665, 632, 660, 613, 616, 632, 626, 622, 658, 641, 650, 652, 661, 613,
			584, 635, 612, 669, 652, 599, 628, 663, 649, 647, 663, 674, 642, 607, 624, 627,
			621, 649, 661, 646, 618, 657, 675, 679, 647, 624, 673, 613, 679, 624, 642, 666,
			582, 688, 606, 629, 691, 609, 638, 617, 626, 621, 676, 611, 623, 628, 629, 611,
			641, 625, 633, 648, 660, 665, 674, 678, 645, 632, 658, 639, 625, 615, 652, 651,
			648, 648, 692, 623, 634, 658, 616, 622, 660, 618, 683, 652, 656, 695, 615, 620,
			640, 634, 648, 649, 650, 616, 655, 635, 632, 655, 628, 667, 690, 631, 635, 646,
			637, 631, 630, 609, 672, 639, 659, 617, 594, 619, 655, 627, 656, 640, 640, 626,
			648, 667, 643, 681, 621, 616, 681, 614, 678, 618, 637, 646, 654, 621, 657, 565,
		}},
	// // Longer test vectors commented out to save time.
	// {91710, 1024 * 1024 * 20, "1dd8c51ad70c5e075541638493254f2d7f9b772b399171ccc7ef8571a67af395", [256]int64{
	// 	655698, 654998, 657191, 655291, 655622, 654656, 655048, 655734, 656161, 655930, 653602, 654693, 656215, 655394, 656332, 655885,
	// 	653433, 655485, 654454, 655737, 655705, 656801, 655690, 654601, 655336, 655792, 656326, 654850, 655316, 655364, 655028, 656820,
	// 	655683, 655168, 655023, 655344, 656308, 657138, 655970, 654551, 655785, 654650, 655719, 654933, 654805, 655335, 655188, 655958,
	// 	655445, 655428, 656313, 655670, 654805, 655978, 656466, 656821, 656450, 656107, 655372, 653697, 654446, 654871, 656021, 657469,
	// 	655176, 654408, 655467, 656262, 654531, 655262, 657245, 655469, 655972, 653811, 655102, 653840, 655826, 655535, 656348, 655032,
	// 	655989, 654646, 653992, 653405, 655754, 655262, 654575, 656561, 655798, 654656, 654225, 655465, 655457, 655684, 654621, 653765,
	// 	655493, 655421, 654188, 656067, 653043, 656098, 654152, 654777, 655416, 655786, 655890, 654493, 655585, 656101, 656027, 654469,
	// 	655749, 655723, 655182, 655461, 656331, 655133, 654686, 655996, 655399, 655705, 655789, 655489, 656082, 656754, 655526, 655281,
	// 	655598, 653899, 656520, 656196, 654355, 656561, 654599, 654671, 656255, 655713, 655561, 657179, 655250, 654542, 655382, 654337,
	// 	656822, 654976, 656325, 654887, 655296, 655603, 654890, 655139, 656048, 655829, 654852, 654983, 655746, 655037, 654169, 655662,
	// 	653847, 655084, 655539, 655133, 654359, 653605, 655250, 656112, 657085, 655817, 654998, 654846, 654134, 655898, 655972, 655243,
	// 	656216, 654116, 655281, 655151, 653506, 655151, 655525, 655244, 656592, 655196, 655668, 655017, 656132, 654046, 655431, 653728,
	// 	655698, 656824, 657290, 653780, 655052, 655118, 653981, 655026, 654818, 656101, 655859, 655416, 656219, 655144, 656409, 654429,
	// 	654482, 655014, 655371, 656330, 654724, 655052, 655302, 655046, 655617, 657147, 656950, 654113, 655727, 654606, 655506, 656476,
	// 	655061, 655734, 654898, 655866, 656344, 653833, 654307, 654268, 655847, 655020, 655817, 654404, 654210, 655122, 655593, 655405,
	// 	655266, 653339, 654951, 655661, 655471, 654473, 656068, 655936, 656394, 654766, 656081, 656329, 656700, 654703, 654115, 655181,
	// }},
	// {91709, 1024 * 1024 * 20, "53aaa649adb93541e0254b5d51ce5a5cf56e399f19e21bae9597ed915f773733", [256]int64{
	// 	655506, 655845, 655028, 654699, 656315, 655726, 653680, 653557, 655983, 655718, 655961, 654870, 655630, 656054, 655215, 654369,
	// 	656410, 656360, 658005, 653751, 655637, 655751, 656227, 653754, 655745, 655732, 655595, 657013, 655433, 654237, 656619, 654700,
	// 	655926, 655021, 654527, 654901, 655438, 654163, 654891, 655993, 655390, 654976, 655696, 655823, 654746, 656223, 656546, 655726,
	// 	656865, 655780, 656480, 654472, 656364, 655061, 654502, 655994, 655530, 653553, 655970, 654765, 655756, 654679, 654355, 656082,
	// 	655173, 656436, 656025, 655444, 654760, 656717, 654806, 655528, 655625, 656941, 655251, 655961, 656830, 655145, 654623, 654987,
	// 	655115, 656127, 655348, 655117, 654798, 655425, 655501, 656118, 656306, 654361, 654814, 655711, 655620, 655184, 655312, 655056,
	// 	656611, 656295, 655541, 655454, 655872, 655208, 655071, 656722, 655843, 654605, 654975, 655916, 657032, 655859, 655159, 654329,
	// 	654626, 655922, 655793, 656076, 655223, 655827, 656484, 654913, 655852, 655152, 656461, 654553, 656733, 656475, 656909, 655810,
	// 	654516, 654291, 655531, 655463, 655397, 654147, 655580, 653909, 654086, 656195, 655080, 655713, 656495, 655001, 655897, 655202,
	// 	654853, 655930, 655490, 656943, 655203, 654702, 656320, 655464, 656113, 654497, 653094, 655244, 655893, 655117, 655549, 654757,
	// 	656585, 654635, 656721, 655667, 656571, 654186, 656429, 654302, 656693, 656367, 654985, 655799, 654351, 653577, 655383, 654408,
	// 	655753, 654813, 655483, 654615, 654104, 655535, 653275, 653812, 655120, 654359, 655328, 654196, 654098, 655545, 655922, 655426,
	// 	656157, 655163, 653719, 654978, 655185, 653726, 656296, 653536, 655364, 653508, 655491, 654702, 656015, 656216, 654835, 655189,
	// 	655822, 654431, 654652, 656749, 655398, 656156, 653938, 656229, 656185, 654040, 655394, 655917, 654440, 656725, 654836, 655558,
	// 	655880, 654275, 654928, 656066, 655352, 654940, 655365, 654827, 654810, 656176, 656175, 654866, 654631, 655676, 655199, 655387,
	// 	654484, 655812, 655081, 656002, 653278, 655418, 655064, 655371, 655397, 656883, 654769, 654854, 655402, 654974, 655862, 653878,
	// }},
	{100, 1, "0000000000000000000000000000000000000000000000000000000000000000",
		[256]int64{}},
	{321, 200, "e169fdbf16c0c57d500ca022e54d9060e56cfd2818ca201dbae46735040200c9",
		[256]int64{
			8, 4, 5, 7, 4, 4, 11, 8, 5, 5, 3, 5, 6, 6, 6, 3,
			3, 8, 5, 5, 6, 5, 4, 2, 4, 2, 7, 5, 3, 6, 6, 4,
			7, 4, 7, 3, 8, 7, 4, 5, 10, 8, 7, 6, 5, 8, 10, 4,
			4, 3, 9, 4, 5, 9, 9, 12, 3, 9, 3, 9, 7, 8, 4, 9,
			10, 5, 9, 9, 11, 6, 1, 6, 3, 5, 6, 6, 4, 7, 4, 5,
			5, 9, 2, 8, 4, 5, 9, 8, 5, 6, 6, 9, 11, 5, 3, 6,
			4, 4, 4, 8, 4, 13, 6, 6, 10, 3, 9, 8, 9, 7, 7, 8,
			6, 3, 7, 9, 5, 7, 7, 6, 10, 5, 7, 5, 6, 7, 8, 10,
			5, 5, 5, 4, 2, 10, 7, 4, 2, 5, 4, 5, 10, 4, 4, 7,
			8, 5, 10, 8, 2, 6, 10, 3, 7, 5, 9, 6, 1, 7, 8, 11,
			6, 7, 4, 3, 5, 8, 1, 5, 5, 3, 1, 4, 4, 7, 4, 9,
			4, 4, 9, 8, 2, 5, 2, 4, 5, 5, 6, 3, 14, 3, 7, 5,
			11, 4, 7, 7, 9, 9, 7, 2, 10, 4, 7, 3, 4, 5, 7, 8,
			5, 3, 6, 4, 6, 6, 8, 10, 3, 10, 7, 5, 9, 3, 6, 3,
			12, 8, 10, 7, 9, 8, 6, 11, 8, 5, 11, 7, 7, 9, 8, 7,
			7, 6, 5, 7, 4, 9, 7, 4, 9, 6, 3, 4, 5, 7, 9, 7,
		}},
}

func TestFilltran(t *testing.T) {
	var buf [256]byte
	filltran(&buf)
	reference := []byte{
		0x02, 0xd6, 0x9e, 0x6f, 0xf9, 0x1d, 0x04, 0xab,
		0xd0, 0x22, 0x16, 0x1f, 0xd8, 0x73, 0xa1, 0xac,
		0x3b, 0x70, 0x62, 0x96, 0x1e, 0x6e, 0x8f, 0x39,
		0x9d, 0x05, 0x14, 0x4a, 0xa6, 0xbe, 0xae, 0x0e,
		0xcf, 0xb9, 0x9c, 0x9a, 0xc7, 0x68, 0x13, 0xe1,
		0x2d, 0xa4, 0xeb, 0x51, 0x8d, 0x64, 0x6b, 0x50,
		0x23, 0x80, 0x03, 0x41, 0xec, 0xbb, 0x71, 0xcc,
		0x7a, 0x86, 0x7f, 0x98, 0xf2, 0x36, 0x5e, 0xee,
		0x8e, 0xce, 0x4f, 0xb8, 0x32, 0xb6, 0x5f, 0x59,
		0xdc, 0x1b, 0x31, 0x4c, 0x7b, 0xf0, 0x63, 0x01,
		0x6c, 0xba, 0x07, 0xe8, 0x12, 0x77, 0x49, 0x3c,
		0xda, 0x46, 0xfe, 0x2f, 0x79, 0x1c, 0x9b, 0x30,
		0xe3, 0x00, 0x06, 0x7e, 0x2e, 0x0f, 0x38, 0x33,
		0x21, 0xad, 0xa5, 0x54, 0xca, 0xa7, 0x29, 0xfc,
		0x5a, 0x47, 0x69, 0x7d, 0xc5, 0x95, 0xb5, 0xf4,
		0x0b, 0x90, 0xa3, 0x81, 0x6d, 0x25, 0x55, 0x35,
		0xf5, 0x75, 0x74, 0x0a, 0x26, 0xbf, 0x19, 0x5c,
		0x1a, 0xc6, 0xff, 0x99, 0x5d, 0x84, 0xaa, 0x66,
		0x3e, 0xaf, 0x78, 0xb3, 0x20, 0x43, 0xc1, 0xed,
		0x24, 0xea, 0xe6, 0x3f, 0x18, 0xf3, 0xa0, 0x42,
		0x57, 0x08, 0x53, 0x60, 0xc3, 0xc0, 0x83, 0x40,
		0x82, 0xd7, 0x09, 0xbd, 0x44, 0x2a, 0x67, 0xa8,
		0x93, 0xe0, 0xc2, 0x56, 0x9f, 0xd9, 0xdd, 0x85,
		0x15, 0xb4, 0x8a, 0x27, 0x28, 0x92, 0x76, 0xde,
		0xef, 0xf8, 0xb2, 0xb7, 0xc9, 0x3d, 0x45, 0x94,
		0x4b, 0x11, 0x0d, 0x65, 0xd5, 0x34, 0x8b, 0x91,
		0x0c, 0xfa, 0x87, 0xe9, 0x7c, 0x5b, 0xb1, 0x4d,
		0xe5, 0xd4, 0xcb, 0x10, 0xa2, 0x17, 0x89, 0xbc,
		0xdb, 0xb0, 0xe2, 0x97, 0x88, 0x52, 0xf7, 0x48,
		0xd3, 0x61, 0x2c, 0x3a, 0x2b, 0xd1, 0x8c, 0xfb,
		0xf1, 0xcd, 0xe4, 0x6a, 0xe7, 0xa9, 0xfd, 0xc4,
		0x37, 0xc8, 0xd2, 0xf6, 0xdf, 0x58, 0x72, 0x4e,
	}

	if bytes.Compare(buf[:], reference) != 0 {
		t.Errorf("Buffers differ:\n\n %v\n\n %v", buf, reference)
	}

}

func TestTran(t *testing.T) {

	reference := []byte{
		0x39, 0x7d, 0x56, 0xb1, 0x7b, 0x24, 0x3d, 0x91,
		0x5e, 0x28, 0x30, 0xe1, 0x2b, 0x3e, 0xa0, 0x31,
		0x30, 0x7f, 0x1f, 0x4e, 0xd9, 0xaa, 0xcb, 0x61,
		0xcd, 0x21, 0xba, 0x99, 0xcf, 0xda, 0xe3, 0xbc,
	}

	l := 231
	for i := 0; i < 32; i++ {
		l = ((21 * l) + 221) % 256
		if tran3(byte(i), byte(l), byte((l+i)%256), 4) != reference[i] {
			t.Errorf("Expected %d at position %d, generated %d\n", reference[i], i, tran3(byte(i), 2, 3, 4))
		}
	}
}

func TestWrite(t *testing.T) {
	for j, test := range testCases {
		source := io.LimitReader(newRandReader(test.seed), test.length)

		sim := new(Writer)
		io.Copy(sim, source)

		for i := 0; i < 256; i++ {
			if sim.buckets[i] != test.expected[i] {
				t.Errorf("Expected %d in test %d at position %d, was %d",
					test.expected[i],
					j,
					i,
					sim.buckets[i])
			}
		}

		actualCode := sim.Code().String()
		if actualCode != test.expectedCode {
			t.Errorf("expected code %s, was %s\n", test.expectedCode, actualCode)
		}
	}
}

func TestWriteSmallChunks(t *testing.T) {
	testCase := testCases[1]

	sim := new(Writer)
	for writeSize := 1; writeSize < 2*sim.BlockSize(); writeSize = (writeSize * 3) - 1 {
		source := io.LimitReader(newRandReader(testCase.seed), testCase.length)
		sim.Reset()
		buf := make([]byte, writeSize)
		written := int64(0)
		for written < int64(testCase.length) {
			length, _ := source.Read(buf)
			sim.Write(buf[:length])
			written += int64(length)
		}

		for i := 0; i < 256; i++ {
			if sim.buckets[i] != testCase.expected[i] {
				t.Errorf("Expected %d at position %d when writing %d-byte blocks, was %d",
					testCase.expected[i],
					i,
					writeSize,
					sim.buckets[i])
				break
			}
		}
	}
}

func TestHammingDistance(t *testing.T) {
	bitvectors := []struct {
		a, b     string
		expected int
	}{
		{
			"0000000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000000",
			0,
		},
		{
			"1111111111111111111111111111111111111111111111111111111111111111",
			"0000000000000000000000000000000000000000000000000000000000000000",
			64,
		},
		{
			"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5",
			"5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A",
			256,
		},
	}

	for _, bitvector := range bitvectors {
		var abits, bbits [32]byte
		for i := 0; i < len(abits); i++ {
			fmt.Sscanf(bitvector.a[2*i:], "%02x", &abits[i])
			fmt.Sscanf(bitvector.b[2*i:], "%02x", &bbits[i])
		}

		distance := hammingDistance(abits, bbits)

		if distance != bitvector.expected {
			t.Errorf("Expected %d, was %d\n", bitvector.expected, distance)
		}
	}
}

func TestScan(t *testing.T) {
	for _, testCase := range testCases {
		var c Code
		fmt.Sscanf(testCase.expectedCode, "%x", &c)
		if c.String() != testCase.expectedCode {
			t.Errorf("expected %s, was %s\n", c.String(), testCase.expectedCode)
		}
	}
}

// func TestAgainstC(t *testing.T) {
// 	for j, test := range testCases {
// 		c_source := io.LimitReader(newRandReader(test.seed), test.length)
// 		go_source := io.LimitReader(newRandReader(test.seed), test.length)

// 		var buffer bytes.Buffer
// 		io.Copy(&buffer, c_source)

// 		c_buckets := cmeclax.Accumulate(buffer.Bytes()).Buckets()
// 		sim := new(Writer)
// 		io.Copy(sim, go_source)

// 		for i := 0; i < 256; i++ {
// 			if sim.buckets[i] != int64(c_buckets[i]) {
// 				t.Errorf("Expected %d in test %d at position %d, was %d",
// 					c_buckets[i],
// 					j,
// 					i,
// 					sim.buckets[i])
// 			}
// 		}
// 	}
// }

// func BenchmarkBlockGo(b *testing.B) {
// 	for n := 0; n < b.N; n++ {
// 		tests := []struct {
// 			seed, length int64
// 		}{
// 			{91709, 3298000},
// 		}

// 		for _, test := range tests {
// 			go_source := io.LimitReader(newRandReader(test.seed), test.length)
// 			// buf := make([]byte, test.length)
// 			// go_source.Read(buf)
// 			sim := new(Writer)
// 			io.Copy(sim, go_source)
// 			//			block([]byte{}, buf)
// 		}
// 	}

// }

// func BenchmarkBlockC(b *testing.B) {
// 	for n := 0; n < b.N; n++ {
// 		tests := []struct {
// 			seed, length int64
// 		}{
// 			{91709, 3298000},
// 		}

// 		for _, test := range tests {
// 			c_source := io.LimitReader(newRandReader(test.seed), test.length)
// 			var buffer bytes.Buffer
// 			io.Copy(&buffer, c_source)
// 			cmeclax.Accumulate(buffer.Bytes())
// 		}
// 	}
// }
